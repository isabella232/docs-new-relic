---
title: New Relic APM
owner: Partners
---

This is documentation for the Pivotal Cloud Foundry [New Relic APM](https://network.pivotal.io/products/p-new-relic) tile.

New Relic APM supports real-time instrumentation and monitoring of application performance via its embedded agent that runs with applications. New Relic agent code embedded or bundled with the application instruments the application code and publishes performance monitoring metrics and other details back to New Relic APM Dashboard.

##<a id='service-broker'></a>New Relic Service Broker ##

A Service Broker allows Cloud Foundry applications to bind to services and consume the services easily from the Pivotal Apps Manager Console or from the command line. The New Relic Service Broker enables you to use one or more New Relic accounts and is deployed as a Java Application on Cloud Foundry. The Broker exposes the New Relic service on the Cloud Foundry Marketplace and allows users to directly create a service instance and bind it to their applications either from the Pivotal Apps Manager Console or from the command line.

The Pivotal Cloud Foundry (PCF) Tile for New Relic installs the New Relic Service Broker as an application, registers it as a Service Broker on Cloud Foundry, and exposes its service plans on the Marketplace. This makes the installation and subsequent use of New Relic on your Cloud Foundry applications simple and easy.

##<a id='trial'></a>Trial License ##

Customers interested in using New Relic can obtain a [60 day free trial license](http://newrelic.com/signup?funnel=pivotal-cloud-foundry&partner=Pivotal+Cloud+Foundry&product_id=Standard&promo_code=PVCF60PRO).

##<a id='product-snapshot'></a>Product Snapshot ##

<dl>
<dt>Current <a href="https://network.pivotal.io/products/p-new-relic">New Relic APM Tile</a> for Pivotal Cloud Foundry Details</dt>
<dd><strong>Version</strong>: 1.10.0</dd>
<dd><strong>Release Date</strong>: 2017-03-30</dd>
<dd><strong>Software component version</strong>: New Relic Service Broker v1.10.0</dd>
<dd><strong>Compatible Ops Manager Version(s)</strong>: v1.8.x, v1.9.x, v1.10.x</dd>
<dd><strong>Compatible Elastic Runtime Version(s)</strong>: v1.8.x, v1.9.x, v1.10.x</dd>
<dd><strong>vSphere support?</strong> Yes</dd>
<dd><strong>AWS support?</strong> Yes</dd>
<dd><strong>Google Cloud Platform support?</strong> Yes</dd>
</dl>

##<a id='upgrading'></a>Upgrading to the Latest Version ##

<dl>
<dd><strong>Upgrade path</strong>Upgrade from v1.6 or v1.7 is supported. Any older tile configuration in ops mgr v1.8, v1.9 or 1.10 will show with older New Relic tile version. Any 1.6, 1.7 will have configuration that can be imported and carried forward when importing this tile.</dd>
</dl>

##<a id='installing'></a> Install via Pivotal Ops Manager ##

1. Download the product file from [Pivotal Network](https://network.pivotal.io/).
1. **Import** the product file to your Ops Manager installation.
1. Click **Add** next to the uploaded product description in the Ops Manager "Available Products" view to add this product to your staging area.
1. Click the newly added tile to review any configurable options.
1. Click **Apply Changes** to install the service.

##<a id='configuring'></a>Configuring the New Relic Tile ##

1. Log in into Pivotal Ops Manager.
1. Click **Import a Product** and import the New Relic Tile.

    <%= image_tag("import-product.png") %>

1. Click **Add** on the New Relic Tile.

    <%= image_tag("add.png") %>

1. Select the New Relic tile.

    <%= image_tag("select.png") %>

1. Configure the New Relic Service Broker.
    * Click **Add** on the far right of the Service Plan screen to create a new
    service plan.

    <%= image_tag("configure.png") %>

1. Create a service plan with your New Relic license key.
    * Log in to your New Relic account and navigate to the **Account Settings**
    page from the drop-down menu in the upper right corner of the page. Save
    the plan(s).

    <%= image_tag("account-info.png") %>

	<%= image_tag("save.png") %>

1. Apply your changes.

1. On completion of New Relic Tile install, check the Services Marketplace in Apps Manager.

    <%= image_tag("marketplace.png") %>

1. View New Relic Service Plans.

    <%= image_tag("plans.png") %>

1. Bind the New Relic Service to an Application.

    <%= image_tag("bind.png") %>

1. In a terminal window, use the `cf restage` command to make the changes effective.

    <pre class='terminal'>
      $ cf restage APPNAME
    </pre>

1. Log in into New Relic to view monitoring data.

    Figure 13.1: New Relic App Monitoring Dashboard<br>
    <%= image_tag("view07.png") %>

    Figure 13.2: New Relic Transactions View<br>
    <%= image_tag("view08.png") %>

    Figure 13.3: Transaction Traces View<br>
    <%= image_tag("view09.png") %>

    Figure 13.4: New Relic Database View<br>
    <%= image_tag("view10.png") %>

    Figure 13.5: New Relic Web Transactions View<br>
    <%= image_tag("view11.png") %>

    Figure 13.6: New Relic Top Web Transactions View<br>
    <%= image_tag("view12.png") %>

    Figure 13.7: New Relic JVMs View<br>
    <%= image_tag("view13.png") %>

##<a id='http-proxy'></a>Configuration with HTTP Proxy ##

If the Cloud Foundry environment needs to use an http(s) proxy for external outbound communication, the Service Broker itself does not need to know anything about the http proxy, as it just relays the license keys to the consumer apps. The consumer application should specify the http\_proxy or https\_proxy as an environment variable for the agent to communicate externally with non-java applications, and use JAVA_OPTS for Java applications. In addition, the New Relic Agent should also be configured with its own set of parameters (**-Dnewrelic.config.\***) to communicate with its controller through the proxy for Java language applications..

**Specify using http_proxy for the New Relic non-Java application agent to talk to its controller via the proxy**

<pre class='terminal'>
  $ cf set-env APPNAME http_proxy ‘http://user:password@proxy-server.customer.example.com:8080'

  $ cf set-env APPNAME https_proxy ‘http://user:password@proxy-server.customer.example.com:8080'
</pre>

**Specify using JAVA_OPTS for the New Relic Java agent to talk to its controller via the proxy**

<pre class='terminal'>
  $ cf set-env APPNAME JAVA_OPTS " -Dtest.value=barbar
  -Dnewrelic.config.proxy_host=proxy.customer.example.com
  -Dnewrelic.config.proxy_port=8080 “
</pre>

**If a Java application also needs to talk through a proxy, add the Java proxy settings in addition to the New Relic agent proxy settings**

<pre class='terminal'>
  $ cf set-env APPNAME JAVA_OPTS " -Dtest.value=barbar
  -Dnewrelic.config.proxy_host=proxy.customer.example.com
  -Dnewrelic.config.proxy_port=8080
  -Dhttp.proxyHost=proxy.customer.example.com-Dhttp.proxyPort=8080
  -Dhttps.proxyHost=proxy.customer.example.com -Dhttps.proxyPort=8080  “
</pre>

**For a non-java app that needs to talk outbound via a proxy**

<pre class='terminal'>
  $ cf set-env APPNAME http_proxy http://user@password:myproxy....:8080/
  $ cf set-env APPNAME https_proxy https://user@password:myproxy....:8080/
</pre>

Whenever making changes to Cloud Foundry environment variables, you must restage your application(s) to make the changes effective.

<pre class='terminal'>
  $ cf restage APPNAME
</pre>

These environment variables can either be set individually per app, or via env variable groups to be set for all apps as part of staging, running environments, etc., using the cf CLI.

**ENVIRONMENT VARIABLE GROUPS**

* **running-environment-variable-group, revg**: Retrieve the contents of the running environment variable group
* **staging-environment-variable-group, sevg**: Retrieve the contents of the staging environment variable group
* **set-staging-environment-variable-group, ssevg**: Pass parameters as JSON to create a staging environment variable group
* **set-running-environment-variable-group, srevg**: Pass parameters as JSON to create a running environment variable group

Use the JAVA\_OPTS environment variable to specify New Relic Agent-specific environment variables in the Staging environment group so the Java Buildpack can use that and push it in the correct place. Specifying JAVA\_OPTS in the Runtime environment variable group will not yield anything, as the buildpack will not know about it.

Example:

<pre class='terminal'>
  $ cf ssevg '{ "JAVA_OPTS" : " -Dtest.value=barbar
  -Dnewrelic.config.proxy_host=proxy.customer.example.com
  -Dnewrelic.config.proxy_port=8080 -Dhttp.proxyHost=proxy.customer.example.com
  -Dhttp.proxyPort=8080 -Dhttps.proxyHost=proxy.customer.example.com
  -Dhttps.proxyPort=8080 -Dspring.profiles.active=dev
  -Dnewrelic.config.log_level=finer
  -Djavax.net.debug=all ", "test_env_profile" : "Staging" }'
</pre>

Also refer to the following documentation: [https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file#config-options-precedence](https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file#config-options-precedence)

##<a id='offline-dependencies'></a>Packaging Dependencies for Offline Buildpacks ##

If you are running PCF in an offline manner, you should recreate and package the dependencies, including the New Relic agent binaries, via offline buildpacks in your PCF environment.

More details on this can be found here:  https://docs.run.pivotal.io/buildpacks/depend-pkg-offline.html

##<a id='limitations'></a>Limitations ##

* Currently supported Buildpacks bundling New Relic Agent are the Java, node.js and PHP Buildpacks.
    * Java Buildpack 2.7 and later and 3.x
    * Node.js Buildpack v1.5.19 and later
    * PHP Buildpack 4.0+
* Similar support would be built for other language buildpacks in future releases.

##<a id='feedback'></a>Feedback ##

Please provide any bugs, feature requests, or questions to the Pivotal Cloud Foundry Feedback list.
